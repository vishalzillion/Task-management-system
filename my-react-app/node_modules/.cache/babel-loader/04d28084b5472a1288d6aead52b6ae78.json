{"ast":null,"code":"/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n  async function mapResult(result) {\n    if (result.done) {\n      return result;\n    }\n    try {\n      return {\n        value: await callback(result.value),\n        done: false\n      };\n    } catch (error) {\n      /* c8 ignore start */\n      // FIXME: add test case\n      if (typeof iterator.return === 'function') {\n        try {\n          await iterator.return();\n        } catch (_e) {\n          /* ignore error */\n        }\n      }\n      throw error;\n      /* c8 ignore stop */\n    }\n  }\n\n  return {\n    async next() {\n      return mapResult(await iterator.next());\n    },\n    async return() {\n      // If iterator.return() does not exist, then type R must be undefined.\n      return typeof iterator.return === 'function' ? mapResult(await iterator.return()) : {\n        value: undefined,\n        done: true\n      };\n    },\n    async throw(error) {\n      if (typeof iterator.throw === 'function') {\n        return mapResult(await iterator.throw(error));\n      }\n      throw error;\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}