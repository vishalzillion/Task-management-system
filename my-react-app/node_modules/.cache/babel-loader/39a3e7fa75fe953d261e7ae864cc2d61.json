{"ast":null,"code":"var _jsxFileName = \"/home/vishal/vishal_all/Task_managements/my-react-app/src/App.js\";\nimport React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'graphql-tag';\nconst client = new ApolloClient({\n  uri: 'http://localhost:8000/graphql/'\n});\nReactDOM.render( /*#__PURE__*/React.createElement(ApolloProvider, {\n  client: client,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }\n})), document.getElementById('root'));\nconst GET_ALL_TASKS = gql`\n  query {\n    all_tasks {\n      id\n      title\n      description\n      # Include other fields you need\n    }\n  }\n`;\nconst CREATE_TASK = gql`\n  mutation CreateTask($title: String!, $description: String!, $priority: String!, $category_id: Int!, $username: String!) {\n    create_task(title: $title, description: $description, priority: $priority, category_id: $category_id, username: $username) {\n      task {\n        id\n        title\n        description\n        # Include other fields you need\n      }\n    }\n  }\n`;\nfunction App() {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_ALL_TASKS);\n  const [createTask] = useMutation(CREATE_TASK);\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, \"Error: \", error.message);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  });\n}\nexport default App;","map":{"version":3,"names":["React","ApolloProvider","ApolloClient","useQuery","useMutation","gql","client","uri","ReactDOM","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","App","document","getElementById","GET_ALL_TASKS","CREATE_TASK","loading","error","data","createTask","message"],"sources":["/home/vishal/vishal_all/Task_managements/my-react-app/src/App.js"],"sourcesContent":["import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { gql } from 'graphql-tag';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:8000/graphql/',\n  });\n\n  ReactDOM.render(\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n  );\n  \n\n\n\nconst GET_ALL_TASKS = gql`\n  query {\n    all_tasks {\n      id\n      title\n      description\n      # Include other fields you need\n    }\n  }\n`;\n\nconst CREATE_TASK = gql`\n  mutation CreateTask($title: String!, $description: String!, $priority: String!, $category_id: Int!, $username: String!) {\n    create_task(title: $title, description: $description, priority: $priority, category_id: $category_id, username: $username) {\n      task {\n        id\n        title\n        description\n        # Include other fields you need\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const { loading, error, data } = useQuery(GET_ALL_TASKS);\n  const [createTask] = useMutation(CREATE_TASK);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <div>\n      {/* Render tasks here */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,qBAAqB;AACpD,OAAOC,YAAY,MAAM,cAAc;AACvC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,qBAAqB;AAC3D,SAASC,GAAG,QAAQ,aAAa;AAEjC,MAAMC,MAAM,GAAG,IAAIJ,YAAY,CAAC;EAC5BK,GAAG,EAAE;AACP,CAAC,CAAC;AAEFC,QAAQ,CAACC,MAAM,eACbT,KAAA,CAAAU,aAAA,CAACT,cAAc;EAACK,MAAM,EAAEA,MAAO;EAAAK,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,gBAC7BhB,KAAA,CAAAU,aAAA,CAACO,GAAG;EAAAN,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,CAAE,CACQ,CAAC,EACjBE,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC;AAKH,MAAMC,aAAa,GAAGf,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMgB,WAAW,GAAGhB,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASY,GAAGA,CAAA,EAAG;EACb,MAAM;IAAEK,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGrB,QAAQ,CAACiB,aAAa,CAAC;EACxD,MAAM,CAACK,UAAU,CAAC,GAAGrB,WAAW,CAACiB,WAAW,CAAC;EAE7C,IAAIC,OAAO,EAAE,oBAAOtB,KAAA,CAAAU,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,YAAa,CAAC;EACrC,IAAIO,KAAK,EAAE,oBAAOvB,KAAA,CAAAU,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,SAAO,EAACO,KAAK,CAACG,OAAW,CAAC;EAE/C,oBACE1B,KAAA,CAAAU,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAEK,CAAC;AAEV;AAEA,eAAeC,GAAG"},"metadata":{},"sourceType":"module"}